package com.hiczp.bilibili.live.danmuji.ui;

import com.hiczp.bilibili.live.danmu.api.LiveDanMuReceiver;
import com.hiczp.bilibili.live.danmu.api.LiveDanMuSender;
import com.hiczp.bilibili.live.danmu.api.entity.DanMuResponseEntity;
import com.hiczp.bilibili.live.danmuji.*;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.Date;
import java.util.Vector;

/**
 * Created by czp on 17-5-31.
 */
public class MainForm extends JFrame {
    private static final String FORM_TITLE = "DanMuJi";
    private static final String BILIBILI_LIVE_URL_PREFIX = "http://live.bilibili.com/";

    private Config config = DanMuJi.getConfig();
    private JPanel mainFormJPanel;
    private JTextField roomURLTextField;
    private JButton startButton;
    private JButton stopButton;
    private JTextPane jTextPane;
    private JPanel operationJPanel;
    private JButton sendButton;
    private JTextField sendTextField;
    private JPanel sendJPanel;

    private JMenu pluginConfigMenu;
    private StyledDocument styledDocument;
    private Vector<Thread> danMuSendingThreads;

    //JMenuBar
    {
        JMenuBar jMenuBar = new JMenuBar();

        JMenu window = new JMenu("Window");
        JMenuItem operationArea = new JCheckBoxMenuItem("Operation area", true);
        operationArea.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0));
        window.add(operationArea);
        JMenuItem sendArea = new JCheckBoxMenuItem("Send area", true);
        sendArea.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0));
        window.add(sendArea);
        window.addSeparator();
        JMenuItem clearText = new JMenuItem("Clear text");
        window.add(clearText);
        window.addSeparator();
        JMenuItem exit = new JMenuItem("exit");
        window.add(exit);
        jMenuBar.add(window);

        JMenu config = new JMenu("Config");
        JMenuItem outputSetting = new JMenuItem("Output setting");
        config.add(outputSetting);
        JMenuItem login = new JMenuItem("Login");
        config.add(login);
        jMenuBar.add(config);

        JMenu plugin = new JMenu("Plugin");
        pluginConfigMenu = new JMenu("Plugin config");
        pluginConfigMenu.setEnabled(false);
        plugin.add(pluginConfigMenu);
        plugin.addSeparator();
        JMenuItem pluginList = new JMenuItem("Plugin list");
        plugin.add(pluginList);
        JMenuItem reload = new JMenuItem("Reload");
        plugin.add(reload);
        jMenuBar.add(plugin);

        JMenu help = new JMenu("Help");
        JMenuItem checkUpdates = new JMenuItem("Check updates");
        help.add(checkUpdates);
        JMenuItem about = new JMenuItem("About");
        help.add(about);
        jMenuBar.add(help);

        setJMenuBar(jMenuBar);

        //监听器
        operationArea.addItemListener(itemEvent -> operationJPanel.setVisible(operationArea.isSelected()));

        sendArea.addItemListener(itemEvent -> {
            boolean isSelected = sendArea.isSelected();
            sendJPanel.setVisible(isSelected);
            if (isSelected) {
                sendTextField.requestFocus();
            }
        });

        clearText.addActionListener(itemEvent -> jTextPane.setText(""));

        exit.addActionListener(actionEvent -> dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING)));

        outputSetting.addActionListener(actionEvent -> WindowManager.createAndDisplayOutputSettingForm());

        login.addActionListener(actionEvent -> WindowManager.createAndDisplayLoginForm());

        pluginList.addActionListener(actionEvent -> WindowManager.createAndDisplayPluginListDialog());

        reload.addActionListener(actionEvent -> PluginManager.reloadPlugins());

        checkUpdates.addActionListener(actionEvent -> {
            try {
                Desktop.getDesktop().browse(new URI(Config.GITHUB_REPOSITORY + "/releases"));
            } catch (URISyntaxException | IOException e) {
                e.printStackTrace();
            }
        });

        about.addActionListener(actionEvent -> WindowManager.createAndDisplayAboutDialog());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public MainForm() {
        //变量
        styledDocument = jTextPane.getStyledDocument();
        roomURLTextField.setText(config.roomId);
        roomURLTextField.setCaretPosition(roomURLTextField.getText().length());

        //监听器
        roomURLTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent keyEvent) {
                if (keyEvent.getKeyCode() == KeyEvent.VK_ENTER) {
                    startButton.doClick();
                }
            }
        });

        startButton.addActionListener(actionEvent -> {
            DanMuJi.setUserWantDisconnect(false);
            try {
                String roomURL = BILIBILI_LIVE_URL_PREFIX + roomURLTextField.getText();
                DanMuJi.setLiveDanMuReceiver(
                        new LiveDanMuReceiver(roomURL)
                                .setPrintDebugInfo(config.debug)
                                .addCallback(new LiveDanMuCallback())
                                .connect()
                );
                LiveDanMuSender liveDanMuSender = new LiveDanMuSender(roomURL);
                if (config.cookies != null && !config.cookies.equals("")) {
                    liveDanMuSender.setCookies(config.cookies);
                }
                DanMuJi.setLiveDanMuSender(liveDanMuSender);
                PluginManager.getPluginList().forEach(plugin -> {
                    try {
                        plugin.onStart();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                });
                danMuSendingThreads = new Vector<>();
            } catch (IOException | IllegalArgumentException e) {
                onDisconnect();
                printInfo("%s: %s", e.getClass().getName(), e.getMessage());
                printInfo("Connect failed!");
                e.printStackTrace();
            }
        });

        stopButton.addActionListener(actionEvent -> {
            DanMuJi.setUserWantDisconnect(true);
            try {
                DanMuJi.getLiveDanMuReceiver().close();
            } catch (IOException e) {
                onDisconnect();
                printInfo("%s: %s", e.getClass().getName(), e.getMessage());
                printInfo("Cannot close connection, restart program may solve this problem.");
                e.printStackTrace();
            }
            PluginManager.getPluginList().forEach(plugin -> {
                try {
                    plugin.onStop();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
            stopAllDanMuSendingThreads();
        });

        sendTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent keyEvent) {
                if (keyEvent.getKeyCode() == KeyEvent.VK_ENTER) {
                    sendButton.doClick();
                }
            }

            @Override
            public void keyTyped(KeyEvent keyEvent) {
                String s = sendTextField.getText();
                if (s.length() >= Config.DANMU_MAX_LENGTH) {
                    keyEvent.consume();
                }
            }
        });

        sendButton.addActionListener(actionEvent -> {
            String message = sendTextField.getText();
            if (message.equals("")) {
                printInfo("Please input message.");
                return;
            }
            if (!DanMuJi.isLiveDanMuSenderAvailable()) {
                JOptionPane.showMessageDialog(this, "You must login first!", "Warning", JOptionPane.WARNING_MESSAGE);
                WindowManager.createAndDisplayLoginForm();
                return;
            }
            sendTextField.setText("");
            new Thread(() -> {
                danMuSendingThreads.add(Thread.currentThread());
                try {
                    DanMuResponseEntity danMuResponseEntity = DanMuJi.getLiveDanMuSender().send(message);
                    switch (danMuResponseEntity.code) {
                        case DanMuResponseEntity.NO_LOGIN: {
                            JOptionPane.showMessageDialog(this, "Credentials error!", "Error", JOptionPane.ERROR_MESSAGE);
                            WindowManager.createAndDisplayLoginForm();
                        }
                        break;
                        case DanMuResponseEntity.OUT_OF_LENGTH: {
                            printInfo("Bullet screen only can contains up to %d Unicode characters!", Config.DANMU_MAX_LENGTH);
                        }
                        break;
                        case DanMuResponseEntity.SUCCESS: {
                            if (!danMuResponseEntity.msg.equals("")) {
                                printInfo(danMuResponseEntity.msg);
                            }
                        }
                        break;
                        default: {
                            printInfo("Unknown error: %d %s", danMuResponseEntity.code, danMuResponseEntity.msg);
                        }
                    }
                } catch (IOException e) {
                    if (!DanMuJi.isUserWantDisconnect()) {
                        printInfo("%s: %s", e.getClass().getName(), e.getMessage());
                        printInfo("Send bullet screen failed!");
                        e.printStackTrace();
                    }
                } finally {
                    danMuSendingThreads.remove(Thread.currentThread());
                }
            }).start();
        });

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent windowEvent) {
                config.roomId = roomURLTextField.getText();
                PluginManager.unloadPlugins();
                config.storeToFile();
                LiveDanMuReceiver liveDanMuReceiver = DanMuJi.getLiveDanMuReceiver();
                if (liveDanMuReceiver != null) {
                    try {
                        DanMuJi.getLiveDanMuReceiver().close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                stopAllDanMuSendingThreads();
            }
        });

        //加载文字设置
        reloadStyle();

        //显示窗口
        setTitle(FORM_TITLE);
        setContentPane(mainFormJPanel);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        pack();
    }

    private void stopAllDanMuSendingThreads() {
        danMuSendingThreads.forEach(thread -> {
            try {
                thread.interrupt();
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public void printInfo(String info, Object... objects) {
        printMessage(String.format("[%s] %s", new Date(), String.format(info, objects)));
    }

    public void printMessage(String message, Object... objects) {
        printMessage(styledDocument.getStyle(StyleContext.DEFAULT_STYLE), message, objects);
    }

    public void printMessage(String style, String message, Object... objects) {
        printMessage(styledDocument.getStyle(style), message, objects);
    }

    public void printMessage(Style style, String message, Object... objects) {
        try {
            boolean isInEnd = jTextPane.getCaretPosition() == jTextPane.getText().length();
            styledDocument.insertString(styledDocument.getLength(), String.format(message + "\n", objects), style);
            if (isInEnd) {
                jTextPane.setCaretPosition(jTextPane.getText().length());   //如果光标在最后则自动滚屏
            }
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    public void onConnect() {
        roomURLTextField.setEnabled(false);
        startButton.setEnabled(false);
        stopButton.setEnabled(true);
        sendButton.setEnabled(true);
        sendTextField.requestFocus();
    }

    public void onDisconnect() {
        DanMuJi.setLiveDanMuReceiver(null);
        DanMuJi.setLiveDanMuSender(null);
        stopButton.setEnabled(false);
        roomURLTextField.setEnabled(true);
        startButton.setEnabled(true);
        sendButton.setEnabled(false);
        setTitle(FORM_TITLE);
    }

    public void reloadStyle() {
        Style defaultStyle = styledDocument.getStyle(StyleContext.DEFAULT_STYLE);
        Arrays.stream(Config.class.getDeclaredFields())
                .filter(field -> field.getType() == Config.OutputOptions.class)
                .forEach(field -> {
                    try {
                        String fieldName = field.getName();
                        Config.OutputOptions outputOptions = (Config.OutputOptions) field.get(config);
                        Style style = styledDocument.addStyle(fieldName + "Style", defaultStyle);
                        StyleConstants.setFontSize(style, outputOptions.size);
                        StyleConstants.setForeground(style, outputOptions.color);
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                });
    }

    public StyledDocument getStyledDocument() {
        return styledDocument;
    }

    public JMenu getPluginConfigMenu() {
        return pluginConfigMenu;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainFormJPanel = new JPanel();
        mainFormJPanel.setLayout(new GridLayoutManager(3, 1, new Insets(5, 5, 5, 5), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        mainFormJPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 300), null, 0, false));
        jTextPane = new JTextPane();
        jTextPane.setEditable(false);
        jTextPane.setEnabled(true);
        jTextPane.setInheritsPopupMenu(false);
        scrollPane1.setViewportView(jTextPane);
        operationJPanel = new JPanel();
        operationJPanel.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainFormJPanel.add(operationJPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));
        final JLabel label1 = new JLabel();
        label1.setText("http://live.bilibili.com/");
        operationJPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        roomURLTextField = new JTextField();
        roomURLTextField.setText("");
        operationJPanel.add(roomURLTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        startButton = new JButton();
        startButton.setText("Start");
        operationJPanel.add(startButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        stopButton = new JButton();
        stopButton.setEnabled(false);
        stopButton.setText("Stop");
        operationJPanel.add(stopButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sendJPanel = new JPanel();
        sendJPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainFormJPanel.add(sendJPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        sendTextField = new JTextField();
        sendJPanel.add(sendTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        sendButton = new JButton();
        sendButton.setEnabled(false);
        sendButton.setText("Send");
        sendJPanel.add(sendButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainFormJPanel;
    }
}
